import unittest

from ..parametrizedabc import _popslots, ParametrizedABC, Enumerable


class Range(Enumerable):
    """Imitates range"""
    __parameters__ = ("start", "stop")

    def __new__(cls, start, stop=100):
        return super(Range, cls).__new__(cls, start=start, stop=stop)

    def __iter__(self):
        return iter(range(self.start, self.stop))


class StepRange(Range):
    __slots__ = ["root_height"]
    __parameters__ = ["step"]

    def __new__(cls, start, stop=100, step=2):
        return super(Range, cls).__new__(cls, start=start, stop=stop,
                                         step=step)

    def __iter__(self):
        return iter(range(self.start, self.stop, self.step))


class ParametrizedABCTests(unittest.TestCase):

    def test_slots(self):
        """Ensure slots are processed by ParametrizedABC"""
        slot_types = [
            ({'slots': ['a', 'b', 'c']}, ('a', 'b', 'c')),
            ({'slots': ('a', 'b', 'c')}, ('a', 'b', 'c')),
            ({'slots': 'abc'}, ('abc', )),
            ({'slots': ['abc']}, ('abc', ))
        ]
        for slots, vals in slot_types:
            self.assertEqual(vals, _popslots(slots, 'slots'))
            self.assertEqual({}, slots)

    def test_init(self):
        sr = StepRange(40)
        self.assertEqual(list(range(40, 100, 2)), list(sr))

    def test_dynamic_properties(self):
        """Test that the properties are correctly generated by ParamABC"""
        self.assertIsInstance(StepRange.start, property)
        self.assertIsInstance(StepRange.step, property)
        self.assertIsInstance(StepRange.stop, property)
        self.assertNotIsInstance(StepRange.root_height, property)

    def test_unchangeable_attributes(self):
        """Test that the correct slots are added to the class."""
        r = Range(40)
        sr = StepRange(40)
        sr_old = list(sr)
        for enum in [r, sr]:
            with self.assertRaises(AttributeError):
                del enum._params
            with self.assertRaises(AttributeError):
                enum._params = {'start': 1, 'step': 4, 'stop': 40}
            with self.assertRaises(AttributeError):
                enum.aa4 = 20
            with self.assertRaises(AttributeError):
                del enum.start
            with self.assertRaises(AttributeError):
                enum.start = 10
        self.assertEqual(sr.start, 40)
        self.assertEqual(sr.stop, 100)
        self.assertEqual(sr.step, 2)
        sr.root_height = 4

    def test_mro(self):
        """Sanity check on method resolution order."""
        self.assertSequenceEqual(
            StepRange.mro(),
            [StepRange, Range, Enumerable, object]
        )

    def test_types(self):
        """Sanity check on type subclasses."""
        self.assertIsInstance(StepRange, ParametrizedABC)
        self.assertFalse(issubclass(StepRange, ParametrizedABC))
        self.assertIsInstance(ParametrizedABC, type)
        self.assertTrue(issubclass(ParametrizedABC, type))
